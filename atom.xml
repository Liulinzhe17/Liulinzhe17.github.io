<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kylin17</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liulinzhe.top/"/>
  <updated>2018-05-07T05:17:51.000Z</updated>
  <id>http://liulinzhe.top/</id>
  
  <author>
    <name>Liu,Linzhe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective Objective-C 2.0——读书笔记</title>
    <link href="http://liulinzhe.top/2018/05/07/Effective%20Objective%E2%80%94%E2%80%94C%202.0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://liulinzhe.top/2018/05/07/Effective Objective——C 2.0 读书笔记/</id>
    <published>2018-05-07T13:17:25.000Z</published>
    <updated>2018-05-07T05:17:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>二刷，记录一些自己认为重要的东西。</p></blockquote><a id="more"></a><h2 id="Effective-Objective-C-2-0——读书笔记"><a href="#Effective-Objective-C-2-0——读书笔记" class="headerlink" title="Effective Objective-C 2.0——读书笔记"></a>Effective Objective-C 2.0——读书笔记</h2><h3 id="1、开始"><a href="#1、开始" class="headerlink" title="1、开始"></a>1、开始</h3><ul><li>字面量语法更安全。</li></ul><p>`如下：</p><pre><code>NSAarry *arrayA = [NSArray arrayWithObjects:@&quot;1&quot;,nil,@&quot;2&quot;,nil];NSAarry *arrayB = @[@&quot;1&quot;,nil,@&quot;2&quot;,nil];此时arrayA不会报错，但创建出来的元素会少掉，因为arrayWithObjects方法会依次处理各个参数，直到发现nil为止。arrayB会直接抛出异常。</code></pre><ul><li>不要用预处理指令定义常量。这样定义出来的常量不仅没有类型信息，当有人重新定义了常量值，编译器也不会产生警告，这样会导致应用程序中的常量值不一致。</li><li>如果试图修改由const修饰符所声明的变量，那么编译器会报错。</li><li>static修饰符意味着该变量仅在定义此变量的编译单元中可见。</li></ul><p>`应该如下声明常量：</p><pre><code>.h文件中extern NSTimeInterval const LLZStaticShowTime;.m文件中const NSTimeInterval LLZStaticShowTime = 1.0;</code></pre><ul><li>枚举可表示状态、选项、状态码。凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义，否则编译器会报错。</li><li>strong 和 copy 的区别在于 strong是保留新值，释放旧值，在讲新值设置上去，而copy是将新值拷贝一份，为了保护其封装性。</li><li>weak 和 unsafe_unretained的区别在于 当所指的对象销毁的时候，weak 修饰的属性值会被置为nil，而后者不会自动清空，这个时候可能会发生野指针。</li><li>atomic 会通过锁定机制确保其操作的原子性。但是在iOS中使用同步锁的开销较大，而且atomic并不能保证线程安全，例如：一个线程在连续多次读取某属性值的过程中，另一线程在同时改写该值，那么即便将属性声明为atomic，也还是会读取到不同的属性值。因此在iOS开发中 我们一般使用nonatmoic。</li></ul><h3 id="7、属性访问和直接访问的差别"><a href="#7、属性访问和直接访问的差别" class="headerlink" title="7、属性访问和直接访问的差别"></a>7、属性访问和直接访问的差别</h3><ul><li>点语法需要经过方法派发，如self.age = @18 等价于 [self setAge: @18]；而_age = @18是直接访问保存对象实例变量的那块内存。</li><li>直接访问实例变量，不会调用“设置方法”，这就绕过了相关属性所定义的内存管理语义。</li><li>直接访问实例变量，不会触发KVO</li></ul><p>总结：通过属性访问有助于排查与之相关的错误，因为可以在get/set方法设置断点，但是直接访问实例变量速度更快。</p><h3 id="8、对象等同性"><a href="#8、对象等同性" class="headerlink" title="8、对象等同性"></a>8、对象等同性</h3><ul><li>若想检测对象的等同性，需提供“isEqual:”与hash方法，编写hash方法时，应该使用计算速度快而且哈希码碰撞几率低的算法（对关键属性的hash值进行位或运算作为hash的值）。</li></ul><h3 id="9、类族"><a href="#9、类族" class="headerlink" title="9、类族"></a>9、类族</h3><ul><li>类族模式可以把实现细节隐藏在一套简单的公共接口后面。</li></ul><h3 id="11、消息传递"><a href="#11、消息传递" class="headerlink" title="11、消息传递"></a>11、消息传递</h3><ul><li>objc<em> msgSend</em> stret 处理返回为结构体的消息，只有当CPU的寄存器能够容纳得下消息返回类型时，这个函数才能处理此消息，否则交由另一个函数执行派发。</li><li>objc<em> msgSend</em> fpret 处理返回是浮点数的消息，</li><li>objc_ msgSendSuper 如果要给超类发送消息，那么就交由该函数处理。</li><li>当函数的最后一个操作仅仅是调用其他函数而不会将其返回值另作他用时，才能执行<strong>尾调用优化</strong>，不这么做的话，有可能会过早的发生”栈溢出“现象。</li></ul><h3 id="12、消息转发机制"><a href="#12、消息转发机制" class="headerlink" title="12、消息转发机制"></a>12、消息转发机制</h3><ul><li><strong>动态方法解析：</strong>对象在收到无法解读的消息后，首先将调用其所属类的以下方法：查看该类是否可以动态新增方法以处理此选择子。（<em>举例：此方案常用来实现@dynamic属性）</em><ul><li><ul><li>(BOOL)resolveInstanceMethod:(SEL)selecor（实例方法）</li></ul></li><li><ul><li>(BOOL)resolveClassMethod:(SEL)selecor（类方法）</li></ul></li></ul></li><li><strong>备援接受者：</strong>运行期系统会问该类能不能把这条消息转给其他接受者来处理。处理方法如下。<em>（举例：模拟出”多重继承“，返回能够处理某选择子的相关内部对象，外部看来，好像是该对象亲自处理了这些消息）</em>。<ul><li><ul><li>(id)forwardingTargetForSelector:(SEL)selector</li></ul></li></ul></li><li><strong>完整的消息转发：</strong>首先创建一个NSInvocation对象，把未处理的这条消息中的SEL、参数、目标等全部细节封装起来。<em>（举例：触发消息前：追加另一个参数，改变选择子等等）。</em><ul><li><ul><li>(void)forwardInvocation:(NSInvocation *)invocation</li></ul></li></ul></li><li>最后抛出异常。<ul><li><ul><li>(void)doesNORecognizeSelector</li></ul></li></ul></li></ul><h3 id="13、方法交换"><a href="#13、方法交换" class="headerlink" title="13、方法交换"></a>13、方法交换</h3><ul><li>在运行期，可以向类中新增或替换SEL所对应的方法实现。常用作向原有实现中添加新功能。</li></ul><h3 id="14、类对象"><a href="#14、类对象" class="headerlink" title="14、类对象"></a>14、类对象</h3><ul><li>用类型信息查询方法确定对象类型，不要直接比较类对象，因为某些对象可能实现了消息转发功能。 </li></ul><h3 id="16、全能初始化方法"><a href="#16、全能初始化方法" class="headerlink" title="16、全能初始化方法"></a>16、全能初始化方法</h3><ul><li>若全能初始化方法与超类不同，则需覆写超类中的对应方法。</li></ul><h3 id="17、description"><a href="#17、description" class="headerlink" title="17、description"></a>17、description</h3><ul><li>若想在调试时(po命令)打印出更详尽的对象描述信息，则应实现debugDescription方法。 </li></ul><h3 id="18、尽量使用不可变对象"><a href="#18、尽量使用不可变对象" class="headerlink" title="18、尽量使用不可变对象"></a>18、尽量使用不可变对象</h3><ul><li>只读的属性，可以通过KVC修改。</li><li>不要把可变的集合作为属性公开，而应提供相关方法。</li></ul><h3 id="19、命名规则"><a href="#19、命名规则" class="headerlink" title="19、命名规则"></a>19、命名规则</h3><ul><li>给私有方法的名称加上前缀，这样可以很容易将其同公共方法区分开。</li></ul><h3 id="21、错误模型"><a href="#21、错误模型" class="headerlink" title="21、错误模型"></a>21、错误模型</h3><ul><li>一般不抛出异常，如果抛出异常，那么本应在作用域末尾释放的对象现在却不会释放了。</li></ul><h3 id="22、理解NSCopying协议"><a href="#22、理解NSCopying协议" class="headerlink" title="22、理解NSCopying协议"></a>22、理解NSCopying协议</h3><ul><li>如果想令自己的类支持拷贝操作，就要实现NSCopying协议，重写 - (id)copyWithZone: (NSZone *)zone 方法</li><li>如果自定义的对象分为可变版本和不可变版本，那么就要同时实现NSCopying 与 NSMutableCopying协议。</li><li>如果所写的对象需要深拷贝，可考虑新增一个专门执行深拷贝的方法。</li></ul><h3 id="23、delegate"><a href="#23、delegate" class="headerlink" title="23、delegate"></a>23、delegate</h3><ul><li>在调用delegate对象中的方法时，总是应该把发起委托的实例也一并传入方法中，这样delegate对象在实现相关方法时，就能根据传入的实例分别执行不同的代码了。</li><li>当某一个对象需要从另外一个对象中获取数据时，可是使用委托模式，这种情景下，该模式也称“数据源协议”。</li><li>可用含有位段的结构体<strong>缓存</strong>委托对象是否能响应相关协议方法。</li></ul><h3 id="24、category"><a href="#24、category" class="headerlink" title="24、category"></a>24、category</h3><ul><li>使用分类机制把类的实现代码划分成易于管理的小块。</li><li>将应该视为“私有”的方法归入名叫private 的分类中，以隐藏实现细节。</li><li>将分类方法加入类中这一操作是在运行期系统加载分类时完成的，运行期系统会把分类中所实现的每个方法都加入类的方法l列表中。</li><li>向第三库添加分类时，总应给其名称和其中的方法名加上你专用的前缀。</li><li>尽量不要将属性定义在分类中，因为分类不能合成实例变量，若真这样做了，则可以使用消息转发机制在runtime拦截方法中提供其实现，或者使用关联对象。</li><li>class-continuation分类是唯一能声明实例变量的分类。</li></ul><h3 id="28、通过协议提供匿名对象"><a href="#28、通过协议提供匿名对象" class="headerlink" title="28、通过协议提供匿名对象"></a>28、通过协议提供匿名对象</h3><ul><li>具体的对象类型可以淡化成遵从某协议的id类型，协议里规定了对象所应实现的方法。</li><li>使用匿名对象隐藏类型名称（类名）。</li><li>如果具体类型不重要，重要的是对象能够响应特定方法，那么可使用匿名对象来表示。</li></ul><h3 id="29、ARC"><a href="#29、ARC" class="headerlink" title="29、ARC"></a>29、ARC</h3><ul><li>在iOS应用程序中的根对象是UIApplication对象，是应用程序启动时创建的单例。</li><li>释放操作会在清空最外层的自动释放池时执行，除非你有自己的自动释放池，否则这个时机指的就是当前线程的下一次事件循环。</li><li>在ARC环境下手动调用 retain release autorelease dealloc 是非法的。</li><li>ARC在调用上述方法时，并不通过普通的OC消息派发机制，而是直接调用其底层C语言版本，这样做性能更好。</li><li>在编译期，ARC会把能够互相抵消的retain、release、autorelease操作约简。如果发现在同一个对象上执行了多次“保留”与释放操作，那么ARC有时可以成对地移除这两个操作。</li><li>ARC会自动在 .cxx_destruct方法中生成代码并运行dealloc方法来清理实例变量。</li><li>由方法所返回的对象，其内存管理语义总是通过方法名来体现。</li></ul><h3 id="35、僵尸对象"><a href="#35、僵尸对象" class="headerlink" title="35、僵尸对象"></a>35、僵尸对象</h3><ul><li>系统在回收对象时，可以不将其回收，而是把它转化为僵尸对象，通过环境变量NSZombieEnabled可开启此功能。</li><li>系统会修改对象的isa指针，令其指向特殊的僵尸类，从而使该对象变为僵尸对象，僵尸类 能够响应所有的SEL,响应方式为：打印一条包含消息内容及其接收者的消息，然后终止应用程序。</li></ul><h3 id="36、为什么不用retainCount"><a href="#36、为什么不用retainCount" class="headerlink" title="36、为什么不用retainCount"></a>36、为什么不用retainCount</h3><ul><li>第一：它所返回的保留计数只是某个给定时间点上的值，该方法并未考虑到系统会稍后把自动释放池清空。</li><li>第二：有时系统会优化对象的释放行为，在保留计数还是1的时候就把它回收了。（系统在调用底层release方法时，引用计数不减一，直接回收内存）。</li><li>NSString *string = @”something”; 在这种情况下，编译器会把NSString对象所表示的数据放到应用程序的二进制文件里，这样的话，运行程序时就可以直接用了，无须再创建NSString对象。</li></ul><h3 id="37、Block"><a href="#37、Block" class="headerlink" title="37、Block"></a>37、Block</h3><ul><li>块与函数类似，只不过是直接定义在另一个函数里的，和定义它的那个函数共享同一范围内的东西。</li><li>块的强大之处在于：在声明它的范围里，所有变量都可以为其所捕获。</li><li>块的内部结构：<br>  <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fr2l4ldo15j31020m6trx.jpg" alt=""></li><li>全局块不会捕捉任何状态（比如外围的变量等）</li><li>用Handler块时把处理成功情况和失败情况所用的代码全放在一个块里可以共享同一份错误处理代码。</li></ul><h3 id="41、GCD、NSOperation"><a href="#41、GCD、NSOperation" class="headerlink" title="41、GCD、NSOperation"></a>41、GCD、NSOperation</h3><ul><li>可使用串行同步队列代替同步块或锁对象。</li><li>performSelecotr系列方法无法确定要执行的选择子具体是什么，所以ARC编译器无法插入适当的内存管理方法。</li><li>performSelecotr系列方法能处理的选择子太过局限，选择子的返回值类型及发送给方法的参数个数都受到限制。</li><li>GCD是纯C的API，而操作队列是OC对象。</li><li>使用NSOperation及NSOperationQueue的好处：<ul><li>取消某个操作</li><li>指定操作间的依赖关系</li><li>可以使用KVO机制监控 NSOperation对象的属性</li><li>指定操作的优先级</li><li>重用NSOperation对象</li></ul></li><li>一系列任务可归入一个dispatch group之中，开发者可以在这组任务执行完毕时获得通知。</li><li>使用dispatch_once()函数实现单例模式，由于每次调用时都必须使用完全相同的标记，所以标记要声明成static；此函数采用的是<strong>原子访问</strong>，没有使用重量级的同步机制。</li></ul><p>`</p><pre><code>+ (id)sharedInstance{    static LLZClass *sharedInstance = nil;    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{        sharedInstance = [[LLZClass alloc]init]    });    return sharedInstance;}</code></pre><ul><li>dispatch_get_current_queue 可做调试之用</li></ul><h3 id="47、系统框架"><a href="#47、系统框架" class="headerlink" title="47、系统框架"></a>47、系统框架</h3><ul><li><strong>框架的定义</strong>：将一系列代码封装为动态库，并在其中放入描述其接口的头文件，这样作出来的东西叫框架。</li><li><p>常用的遍历方式：</p><ul><li>for 循环</li><li>快速遍历（某个类的对象想支持快速遍历，需遵从名为NSFastEnumeration的协议）</li><li><p>基于块的遍历方式（可以从块里获取更多信息如：当前迭代的对象、下标、指向停止迭代的布尔值指针；其本身就能通过GCD来并发执行遍历操作）</p><p>`</p><ul><li>(void)enumerateObjectsUsingBlock:(void(^)(id object, NSUInteger idx, BOOL *stop))block</li></ul></li></ul></li><li><p>通过无缝桥接技术，可以在Foundation框架中的OC对象与CoreFoundation框架中的C语言数据结构之间来回切换。</p></li><li>实现缓存应选用NSCache而非NSDictionary对象，因为NSCache提供自动删减功能，而且是线程安全的，它与字典不同，不会拷贝键。</li><li>NSPurgeableData与NSCache搭配使用，可实现自动清除数据的功能。</li></ul><h3 id="51、load、initialize"><a href="#51、load、initialize" class="headerlink" title="51、load、initialize"></a>51、load、initialize</h3><ul><li>load方法不参与覆写机制，类的load方法要比分类中的先调用。</li><li>首次使用某个类之前，系统会向其发送initialize消息，由于此方法遵从覆写规则，所以通常要在里面判断当前要初始化哪个类。</li><li>load与initialize应该实现的精简些，有助于保持应用的响应能力，也能减少引入”依赖环“的几率。</li><li>无法在编译期设定的全局变量，可以放在initialize方法里初始化。</li></ul><h3 id="52、NSTimer"><a href="#52、NSTimer" class="headerlink" title="52、NSTimer"></a>52、NSTimer</h3><ul><li>NSTimer 对象会保留其目标，直到计时器本身失效为止，调用invalidate方法可令计时器失效，另外，一次性的计时器在触发完任务之后也会失效。</li><li>反复执行任务的计时器很容易引入保留环，可用<strong>块</strong>来打破保留环。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;二刷，记录一些自己认为重要的东西。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://liulinzhe.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OC" scheme="http://liulinzhe.top/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>科学上网</title>
    <link href="http://liulinzhe.top/2018/02/24/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://liulinzhe.top/2018/02/24/科学上网/</id>
    <published>2018-02-24T05:00:18.000Z</published>
    <updated>2018-03-12T10:12:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅供学习使用（内含安卓版、iOS版、Windows版、Mac版）</p></blockquote><a id="more"></a><h1 id="安卓版"><a href="#安卓版" class="headerlink" title="安卓版"></a>安卓版</h1><h2 id="步骤一：下载SSR客户端"><a href="#步骤一：下载SSR客户端" class="headerlink" title="步骤一：下载SSR客户端"></a>步骤一：下载SSR客户端</h2><ul><li>链接: <a href="https://pan.baidu.com/s/1smq9Blj" target="_blank" rel="external">下载地址</a> 提取密码: 16tp</li><li>初始界面<br><img src="https://image.ibb.co/cPf0hc/Wechat_IMG2.png" alt=""></li></ul><h2 id="步骤二：配置"><a href="#步骤二：配置" class="headerlink" title="步骤二：配置"></a>步骤二：配置</h2><h3 id="方法一：二维码（推荐）"><a href="#方法一：二维码（推荐）" class="headerlink" title="方法一：二维码（推荐）"></a>方法一：二维码（推荐）</h3><ul><li>点击shadowsocksR<br><img src="https://image.ibb.co/hkJsvx/Wechat_IMG6.jpg" alt=""></li></ul><h3 id="方法二：手动配置"><a href="#方法二：手动配置" class="headerlink" title="方法二：手动配置"></a>方法二：手动配置</h3><ul><li>配置界面（只用配置一次）<br><img src="https://preview.ibb.co/mE39ax/QQ20180224_0.jpg" alt=""><br><img src="https://preview.ibb.co/iOb6Nc/QQ20180224_1.jpg" alt=""><br><img src="https://image.ibb.co/mojRNc/QQ20180224_2.jpg" alt=""><ul><li>1、输入ip地址</li><li>2、输入端口号</li><li>3、输入密码</li><li>4、加密方法选aes-256-cfb</li><li>5、协议选：auth_sha1_v4</li><li>6、混淆选：plain</li><li>7、路由选：仅代理中国大陆无法访问的地址</li></ul></li></ul><h2 id="步骤三：完成！"><a href="#步骤三：完成！" class="headerlink" title="步骤三：完成！"></a>步骤三：完成！</h2><ul><li>点击连接<br><img src="https://image.ibb.co/jnJWoH/Wechat_IMG51519450058_pic_hd.png" alt=""><ul><li>愉快的学习！！！</li></ul></li></ul><h1 id="iOS版"><a href="#iOS版" class="headerlink" title="iOS版"></a>iOS版</h1><h2 id="步骤一：下载ss客户端"><a href="#步骤一：下载ss客户端" class="headerlink" title="步骤一：下载ss客户端"></a>步骤一：下载ss客户端</h2><ul><li>前往App Store 下载<em>FirstWingy</em>软件</li></ul><h2 id="步骤二：配置-1"><a href="#步骤二：配置-1" class="headerlink" title="步骤二：配置"></a>步骤二：配置</h2><ul><li>输入相应的服务器、端口号、密码即可</li></ul><h2 id="步骤三：完成！-1"><a href="#步骤三：完成！-1" class="headerlink" title="步骤三：完成！"></a>步骤三：完成！</h2><ul><li>点击连接<br><img src="https://image.ibb.co/iF19Cc/Wechat_IMG22.jpg" alt=""><ul><li>愉快的学习</li></ul></li></ul><h1 id="Mac版"><a href="#Mac版" class="headerlink" title="Mac版"></a>Mac版</h1><h2 id="步骤一：下载ss客户端-1"><a href="#步骤一：下载ss客户端-1" class="headerlink" title="步骤一：下载ss客户端"></a>步骤一：下载ss客户端</h2><ul><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.7.0/ShadowsocksX-NG.1.7.0.zip" target="_blank" rel="external">下载地址</a></li></ul><h2 id="步骤二：配置-2"><a href="#步骤二：配置-2" class="headerlink" title="步骤二：配置"></a>步骤二：配置</h2><ul><li>输入相应的服务器、端口号、密码即可</li></ul><h2 id="步骤三：完成！-2"><a href="#步骤三：完成！-2" class="headerlink" title="步骤三：完成！"></a>步骤三：完成！</h2><ul><li>点击连接<br><img src="https://image.ibb.co/j7CG8H/261519651077_pic_hd.jpg" alt=""><ul><li>愉快的学习</li></ul></li></ul><h1 id="Windows版"><a href="#Windows版" class="headerlink" title="Windows版"></a>Windows版</h1><h2 id="步骤一：下载ssr客户端"><a href="#步骤一：下载ssr客户端" class="headerlink" title="步骤一：下载ssr客户端"></a>步骤一：下载ssr客户端</h2><ul><li><a href="https://softs.fun/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/PC/Shadowsocks/Windows/ShadowsocksR/ShadowsocksR-4.7.0.7z" target="_blank" rel="external">下载地址</a></li></ul><h2 id="步骤二：配置-3"><a href="#步骤二：配置-3" class="headerlink" title="步骤二：配置"></a>步骤二：配置</h2><h3 id="方法一：扫二维码形式"><a href="#方法一：扫二维码形式" class="headerlink" title="方法一：扫二维码形式"></a>方法一：扫二维码形式</h3><ul><li>打开下载的ssr客户端，右键图标，之后的操作看图！</li></ul><p><img src="https://image.ibb.co/k8ehL7/windows.png" alt=""></p><h3 id="方法二：手动配置-1"><a href="#方法二：手动配置-1" class="headerlink" title="方法二：手动配置"></a>方法二：手动配置</h3><ul><li>配置方式和Mac版相同</li><li>输入相应的服务器、端口号、密码即可</li></ul><h2 id="步骤三：完成！-3"><a href="#步骤三：完成！-3" class="headerlink" title="步骤三：完成！"></a>步骤三：完成！</h2><ul><li>点击连接<ul><li>愉快的学习</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;仅供学习使用（内含安卓版、iOS版、Windows版、Mac版）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="科学上网" scheme="http://liulinzhe.top/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
  </entry>
  
  <entry>
    <title>软件项目管理笔记</title>
    <link href="http://liulinzhe.top/2018/01/12/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://liulinzhe.top/2018/01/12/软件项目管理笔记/</id>
    <published>2018-01-12T13:21:44.000Z</published>
    <updated>2018-01-14T12:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目管理概述"><a href="#项目管理概述" class="headerlink" title="项目管理概述"></a>项目管理概述</h2><blockquote><p><strong>项目</strong>就是为了创造一个<strong>唯一</strong>的产品或提供一个唯一的服务而进行的<strong>临时性</strong>努力。</p></blockquote><a id="more"></a><h3 id="项目特征"><a href="#项目特征" class="headerlink" title="项目特征"></a>项目特征</h3><ul><li><strong>目标性：</strong>达成某一目的，例如完成一个学生成绩管理系统。</li><li><strong>相关性：</strong>例如举办一个野餐活动，首先选好地点，才能前往地点进行野餐。</li><li><strong>临时性：</strong>要在给定的时间完成任务。</li><li><strong>独特性：</strong>例如每个学校都有自己的学生管理系统，但该系统总会有点差别。有自己的独特性。</li><li><strong>资源约束性：</strong>资源是有限的，例如做一个学生成绩管理系统，不可能全球的开发者都为你服务。</li><li><strong>不确定性：</strong>开发者做到一半跑路了。</li></ul><blockquote><p>软件项目除了具备项目的基本特征之外，还有自己的特殊性</p></blockquote><h3 id="软件项目特殊性"><a href="#软件项目特殊性" class="headerlink" title="软件项目特殊性"></a>软件项目特殊性</h3><ul><li>软件是一种<strong>逻辑实体</strong>。</li><li>相互作用的系统。</li><li><strong>变更</strong>，如需求变更。</li><li><strong>渐进明细</strong>，因为项目的独特性和临时性。</li></ul><blockquote><p>项目管理是项目随着时间的进行，为了确保项目能达到预期结果的一系列管理行为。而软件项目管理 = 项目管理 + 软件项目 + 经验技巧 + ….</p></blockquote><h3 id="项目管理知识体系"><a href="#项目管理知识体系" class="headerlink" title="项目管理知识体系"></a>项目管理知识体系</h3><h4 id="10个知识领域"><a href="#10个知识领域" class="headerlink" title="10个知识领域"></a>10个知识领域</h4><ul><li>集成管理（Integration Mgt），成功的关键，贯穿整个项目。</li><li>范围管理 (Scope Mgt)，定义需要完成的工作。</li><li>时间管理 (Time Mgt)，保证按时完成。</li><li>成本管理 (Cost Mgt)，保证项目所花费的成本不超过预算成本。</li><li>质量管理 (Quality Mgt)，保证满足需求。</li><li>人力资源管理 (HR Mgt)，充分发挥参与项目人员的积极性。</li><li>沟通管理 (Communication Mgt)，确保信息的正确传递。</li><li>风险管理 (Risk Mgt)，降低项目失败的概率。</li><li>采购管理 (Procurement Mgt)，为了满足项目需求，从外部获取资源。</li><li>干系人管理 (Stakeholder Mgt)，分析所有对项目造成影响的人，解决利益冲突。</li></ul><h4 id="5个标准化过程"><a href="#5个标准化过程" class="headerlink" title="5个标准化过程"></a>5个标准化过程</h4><ul><li>启动过程组</li><li>计划过程组</li><li>执行过程组</li><li>控制过程组</li><li>收尾过程组</li></ul><h2 id="项目确立"><a href="#项目确立" class="headerlink" title="项目确立"></a>项目确立</h2><h3 id="项目立项"><a href="#项目立项" class="headerlink" title="项目立项"></a>项目立项</h3><blockquote><p>明确项目的目标、时间表、项目使用的资源和经费，而且得到执行该项目的项目经理和项目发起人的认可。</p></blockquote><ul><li>项目决策：采购？自主研发？外包开发？</li></ul><h3 id="项目招投标"><a href="#项目招投标" class="headerlink" title="项目招投标"></a>项目招投标</h3><blockquote><p>甲方招标书定义 -&gt; 乙方拿到招标书进行项目分析 -&gt; 乙方竞标准备 -&gt; 招标竞标 -&gt; 合同签署。</p></blockquote><h3 id="项目章程"><a href="#项目章程" class="headerlink" title="项目章程"></a>项目章程</h3><blockquote><p>正式的授权项目，任命项目经理，说明项目背景、来源、约束等，通常由项目发起人、高管等签发。</p></blockquote><h3 id="项目经理的职责"><a href="#项目经理的职责" class="headerlink" title="项目经理的职责"></a>项目经理的职责</h3><ul><li>开发计划</li><li>组织实施</li><li>项目控制</li></ul><h2 id="生存期模型"><a href="#生存期模型" class="headerlink" title="生存期模型"></a>生存期模型</h2><ul><li>描述了开发的主要阶段</li><li>定义每一个阶段要完成的主要过程和活动</li><li>确定每一个阶段的输入和输出</li></ul><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><blockquote><p>瀑布模型的流程为：需求分析 -&gt; 设计 -&gt; 实施 -&gt; 测试 -&gt; 维护</p></blockquote><ul><li>需求明确</li><li>方案明确</li><li>短期项目</li></ul><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><blockquote><p>是一种强调测试重要性的模型，是瀑布模型的变种。其中，<strong>详细设计—单元测试</strong>；<strong>总体设计—集成测试</strong>；<strong>需求分析—系统测试</strong>；<strong>用户需求—接受测试</strong>。</p></blockquote><ul><li>需求明确</li><li>方案明确</li><li>系统性能、安全等有严格要求</li></ul><h3 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h3><blockquote><p>是在需求阶段快速构建一部分系统的生存期模型，其流程：需求分析 -&gt; 原型开发 -&gt; 原型评价 -&gt; 最终系统设计 -&gt; 最终系统实现</p></blockquote><ul><li>需求不明确</li><li>希望减少项目需求的不确定性</li></ul><h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><blockquote><p>将需求分段，先完成核心功能的开发，之后交给用户进行评价，经过评价之后形成下一个增量模型的开发计划，它包括对核心产品的修改和一些新功能的发布，直到产生最终的完善产品。</p></blockquote><ul><li>需求基本明确，可能发生变化</li><li>对于市场和用户把握需要逐步了解</li><li>系统改造需要一步步实施</li></ul><h3 id="渐进式阶段模型"><a href="#渐进式阶段模型" class="headerlink" title="渐进式阶段模型"></a>渐进式阶段模型</h3><blockquote><p>具有渐进式前进、阶段式提交的特点。适用中大型项目。</p></blockquote><ul><li>优点⬇️</li><li>阶段式提交一个可运行的产品</li><li>关键功能更早出现</li><li>早期预警问题，避免缺陷蔓延</li><li>阶段性完成可以降低估计失误</li><li>缺点⬇️</li><li>需要精心规划各个阶段的目标</li><li>每阶段提交的都是正式版本，工作量增加</li></ul><h3 id="敏捷模型"><a href="#敏捷模型" class="headerlink" title="敏捷模型"></a>敏捷模型</h3><blockquote><p>不同于传统型开发模型，它更加灵活，可以应对迅速变化的需求，是一种迭代。循序渐进的开发方法。</p></blockquote><h4 id="scrum-燃尽图"><a href="#scrum-燃尽图" class="headerlink" title="scrum-燃尽图"></a>scrum-燃尽图</h4><blockquote><p>有利于工作量的预估</p></blockquote><h4 id="极限编程-xp"><a href="#极限编程-xp" class="headerlink" title="极限编程-xp"></a>极限编程-xp</h4><blockquote><p>实施原则：快速反馈、假设简单、包容变化</p></blockquote><h2 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h2><h3 id="软件需求定义"><a href="#软件需求定义" class="headerlink" title="软件需求定义"></a>软件需求定义</h3><blockquote><p>需求是指用户对软件的功能和性能的要求。它有三个不同的层次。</p></blockquote><ul><li>业务需求:反映了客户对系统的高层次要求</li><li>用户需求：用户通过该软件要完成的任务</li><li>功能需求：开发人员必须实现的软件功能</li><li>软件需求规格：充分描述软件系统必须实现的软件功能</li></ul><h3 id="需求管理过程"><a href="#需求管理过程" class="headerlink" title="需求管理过程"></a>需求管理过程</h3><blockquote><p>需求获取 -&gt; 需求分析 —&gt; 需求规格编写 -&gt; 需求验证 -&gt; 需求变更</p></blockquote><ul><li>需求分析是为用户所看到的系统建立一个概念模型，是对需求的抽象描述</li><li>一份完整、规范的需求规格说明书是需求分析完成的一个基本标志</li><li>需求变更<ul><li>确定需求变更控制过程</li><li>建立变更控制委员会(SCCB)</li><li>进行需求变更影响分析</li><li>跟踪所有受需求变更影响的工作产品</li><li>建立需求基准版本和需求控制版本文档</li><li>维护需求变更的历史记录</li><li>跟踪每项需求的状态</li><li>衡量需求稳定性</li></ul></li></ul><h3 id="需求建模方法"><a href="#需求建模方法" class="headerlink" title="需求建模方法"></a>需求建模方法</h3><ul><li>原型方法，即需求分析，原型开发，原型评价之间的转移。</li><li>结构化分析法，包括数据流图、数据字典、系统流程图。</li><li>面向对象的用例分析法，即用例图、顺序图、状态图、活动图。<ul><li>基于面向对象的情景分析方法</li><li>从用户角度出发考虑的功能需求</li><li>用例是系统向用户提供一个有价值的结果的某项功能</li></ul></li><li>功能列表法，即列出所有子功能并给予描述</li></ul><h2 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h2><blockquote><p>将一个项目分解为更多的子项目，使项目变得更小、更易管理、更易操作,任务分解结果：WBS（Work Breakdown Structure:任务分解结构）</p></blockquote><h3 id="WBS和工作包"><a href="#WBS和工作包" class="headerlink" title="WBS和工作包"></a>WBS和工作包</h3><ul><li>WBS是对项目由粗到细的分解过程。</li><li>面向交付成果的</li><li>WBS它组织并定义了整个项目范围</li><li>WBS的最低层次的可交付成果</li><li>工作包应当由唯一主体负责</li></ul><h3 id="任务分解形式"><a href="#任务分解形式" class="headerlink" title="任务分解形式"></a>任务分解形式</h3><ul><li>清单形式</li><li>图表形式</li></ul><h3 id="任务分解过程"><a href="#任务分解过程" class="headerlink" title="任务分解过程"></a>任务分解过程</h3><h4 id="任务分解基本步骤"><a href="#任务分解基本步骤" class="headerlink" title="任务分解基本步骤"></a>任务分解基本步骤</h4><ul><li>确认并分解项目的组成要素(WBS编号)</li><li>确定分解标准</li><li>确定分解是否详细</li><li>确定项目交付成果（可以编制WBS字典）</li><li>验证分解的正确性</li></ul><h4 id="任务分解的标准"><a href="#任务分解的标准" class="headerlink" title="任务分解的标准"></a>任务分解的标准</h4><blockquote><p>统一，不能有双重标准</p></blockquote><ul><li>最底层的要素是否是实现目标的充分必要条件</li><li>最底层要素是否有重复的</li><li>每个要素是否清晰完整定义</li><li>最底层要素是否有定义清晰的责任人</li><li>是否可以进行成本估算和进度安排</li></ul><h4 id="WBS任务分解建议"><a href="#WBS任务分解建议" class="headerlink" title="WBS任务分解建议"></a>WBS任务分解建议</h4><ul><li>最低层是可控的和可管理的，但是不必要的过细</li><li>每个工作包必须有一个提交物</li><li>定义任务完成的标准</li><li>有利于责任分配</li><li>推荐任务分解到40小时以内</li></ul><h3 id="WBS字典"><a href="#WBS字典" class="headerlink" title="WBS字典"></a>WBS字典</h3><blockquote><p>对工作包的阐述，也可以包括其他信息，如进度表的日期，成本预算。</p></blockquote><h3 id="任务分解方法"><a href="#任务分解方法" class="headerlink" title="任务分解方法"></a>任务分解方法</h3><ul><li>模板参照方法：很多领域都有标准的WBS，可以当作模板参考使用</li><li>类比方法：一些企业保存一些项目的WBS库为其他项目的开发提供参照</li><li>自顶向下：将一个项目逐步分解成许多子项目，是创建WBS的最好方法</li><li>自底向上：适合陌生的项目</li></ul><h2 id="成本计划"><a href="#成本计划" class="headerlink" title="成本计划"></a>成本计划</h2><h3 id="成本估算过程"><a href="#成本估算过程" class="headerlink" title="成本估算过程"></a>成本估算过程</h3><blockquote><p>关于估算，估算不是很准确，有误差，项目经验数据非常重要，不要迷信某些数学模型</p></blockquote><h4 id="软件项目规模"><a href="#软件项目规模" class="headerlink" title="软件项目规模"></a>软件项目规模</h4><ul><li>软件项目规模也称工作量</li><li>软件规模单位：源代码长度（LOC）、功能点（FP）、人月、人天、人年</li></ul><h4 id="软件项目成本"><a href="#软件项目成本" class="headerlink" title="软件项目成本"></a>软件项目成本</h4><ul><li>完成软件规模付出的代价</li><li>待开发软件项目需要的资金</li><li><strong>人的劳动的消耗所需代价</strong>是软件成品的主要成本。</li><li>成本的单位：RMB、Dollar</li></ul><h4 id="软件规模和软件成本的关系"><a href="#软件规模和软件成本的关系" class="headerlink" title="软件规模和软件成本的关系"></a>软件规模和软件成本的关系</h4><ul><li>规模是成本的主要因素，是成本估算的基础</li><li>有了规模就确定了成本</li></ul><h4 id="成本估算结果"><a href="#成本估算结果" class="headerlink" title="成本估算结果"></a>成本估算结果</h4><ul><li>直接成本<ul><li>与具体项目相关的成本，例如参与项目的人员成本</li></ul></li><li>间接成本<ul><li>房租水电、管理费等</li></ul></li></ul><h3 id="成本估算方法"><a href="#成本估算方法" class="headerlink" title="成本估算方法"></a>成本估算方法</h3><h4 id="代码行估算法"><a href="#代码行估算法" class="headerlink" title="代码行估算法"></a>代码行估算法</h4><blockquote><p>从软件程序量的角度定义项目规模，与具体的编程语言有关，功能分解的足够详细，有类似项目的开发经验。</p></blockquote><ul><li><p>优点：代码是所有软件开发项目都有的“产品”，而且很容易计算代码行数。</p></li><li><p>缺点：</p><ul><li>1、对代码行没有公认的可接受的标准定义</li><li>2、代码行数量依赖于所用的编程语言和个人的编程风格. </li><li>3、在项目早期,需求不稳定、设计不成熟、实现不确定的情况下很难准确地估算代码量. </li><li>4、代码行强调编码的工作量,只是项目实现阶段的一部分 </li></ul></li></ul><h4 id="功能点估算法"><a href="#功能点估算法" class="headerlink" title="功能点估算法"></a>功能点估算法</h4><blockquote><p>与实现的语言和技术没有关系，用系统的功能数量来测量其规模，通过评估、加权、量化得出功能点。</p><p>功能点公式：FP = UFC * TCF</p></blockquote><p>UFC-未调整功能点计数</p><ul><li>外部输入：给软件提供面向应用的数据的项（如屏幕、表单、对话框、控件，文件等。</li><li>外部输出：向用户提供(经过处理的)面向应用的信息，例如，报表和出错信息等。</li><li>内部逻辑文件：用户可以识别的一组逻辑相关的数据，而且完全存在于应用的边界之内，并且通过外部输入维护，是逻辑主文件的数目。 </li><li>外部接口文件：用户可以识别的一组逻辑相关数据，这组数据只能被引用。用这些接口把信息传送给另一个系统。</li><li>外部查询：一个输入引出一个即时的简单输出。没有处理过程。 </li></ul><p>TCF-技术复杂度因子</p><ul><li>TCF = 0.65 + 0.01(sum(Fi))。 </li><li>0 ≤ Fi ≤ 5</li><li>0.65 ≤ TCF ≤ 1.35</li><li>Fi一共14项。</li></ul><h4 id="用例点估算法"><a href="#用例点估算法" class="headerlink" title="用例点估算法"></a>用例点估算法</h4><p>用例点估算方法的基本步骤:</p><ul><li>计算未调整的角色的权值UAW;</li><li>计算未调整的用例的权值UUCW;</li><li>计算未调整的用例点UUCP(unadjusted use case weight);</li><li>计算技术和环境因子TEF(technical and environment factor);</li><li>计算调整的用例点UCP;</li><li>计算工作量。</li></ul><blockquote><p>UUCP = UAW + UUCW</p><p>TCF = 0.6 + (0.01 <em> SUM(W</em>V)) <strong>有13项</strong></p><p>ECF= 1.4 + (-0.03 <em> SUM(W</em>V)) <strong>有8项</strong></p><p>TEF = TCF + ECF</p><p>UCP = UUCP * TEF</p><p>工作量（effort） = UCP * PF(项目生产率)</p><h4 id="类比估算法（自顶向下）"><a href="#类比估算法（自顶向下）" class="headerlink" title="类比估算法（自顶向下）"></a>类比估算法（自顶向下）</h4><p>估算人员根据以往的完成类似项目所消耗的总成本（或工作量），来推算将要开发的软件的总成本（或工作量），然后按比例将它分配到各个开发任务单元中</p></blockquote><ul><li>有类似的历史项目数据</li><li>信息不足（例如市场招标）的时候</li><li>要求不是非常精确估算的时候</li></ul><h4 id="自下而上估算法"><a href="#自下而上估算法" class="headerlink" title="自下而上估算法"></a>自下而上估算法</h4><blockquote><p>利用任务分解图(WBS),对各个具体工作包进行详细的成本估算,然后将结果累加起来得出项目总成本。</p></blockquote><ul><li>相对比较准确，它的准确度来源于每个任务的估算情况</li><li>花费时间</li></ul><h4 id="参数估算法"><a href="#参数估算法" class="headerlink" title="参数估算法"></a>参数估算法</h4><ul><li>通过项目数据,进行回归分析,得出回归模型</li><li>通过参数模型估算(规模)成本的方法。</li><li>具有良好的项目数据为基础（使用条件）</li><li>存在成熟的项目估算模型（使用条件）</li><li>比较简单,而且也比较准确（特点）</li><li>如果模型选择不当或者数据不准,也会导致偏差（特点）</li></ul><p>回归分析模型分为两类，一类是静态单变量模型，另一类是动态多变量模型。</p><ul><li>整体公式:E = a + b * S^c<ul><li>E:以人月表示的工作量</li><li>a,b,c:经验导出的系数</li><li>S:主要的输入参数(通常是LOC,FP等)</li></ul></li></ul><p>Walston-Felix模型</p><ul><li><p>E ＝ 5.2 × (KLOC)^0.91， KLOC是源代码行数，E是工作量（以PM计） </p></li><li><p>D ＝ 4.1 × (KLOC)^0.36，D是项目持续时间(以月计) </p></li><li><p>S ＝ 0.54 × E^0.6，S是人员需要量(以人计) </p></li><li><p>DOC ＝ 49 × (KLOC)^1.01 ，DOC是文档数量(以页计) </p></li></ul><p>COCOMO模型</p><h5 id="COCOMO-81-模型级别"><a href="#COCOMO-81-模型级别" class="headerlink" title="COCOMO 81 模型级别"></a>COCOMO 81 模型级别</h5><p>基本COCOMO：静态单变量模型</p><ul><li>E= a * (KLOC) ^ b</li></ul><p>中等COCOMO：基本模型基础上考虑影响因素，调整模型</p><ul><li>E= a <em> (KLOC) ^ b </em> 乘法因子</li></ul><p>高等COCOMO：中等COCOMO模型基础上考虑各个步骤的影响</p><h5 id="COCOMO-81-项目类型"><a href="#COCOMO-81-项目类型" class="headerlink" title="COCOMO 81 项目类型"></a>COCOMO 81 项目类型</h5><ul><li>有机</li><li>嵌入式</li><li>半有机</li></ul><h5 id="COCOMO"><a href="#COCOMO" class="headerlink" title="COCOMO ||"></a>COCOMO ||</h5><ul><li>应用组装模型—规划阶段</li><li>早期设计模型—设计阶段</li><li>后体系结构模型—开发阶段</li></ul><h4 id="专家估算法"><a href="#专家估算法" class="headerlink" title="专家估算法"></a>专家估算法</h4><blockquote><p>由多位专家进行成本估算，一个专家可能会有偏见，最好由多位专家进行估算，取得多个估算值,最后得出综合的估算值</p></blockquote><ul><li>Ei = (ai + 4*mi + bi) / 6</li></ul><p>项目总估算成本 = 直接成本 + 间接成本</p><h3 id="成本预算"><a href="#成本预算" class="headerlink" title="成本预算"></a>成本预算</h3><blockquote><p>成本预算是将项目的总成本按照项目的进度分摊到各个工作单元中去；成本预算的目的是产生成本基线 </p></blockquote><ul><li>分配资源成本：设置加班费率。</li><li>分配固定资源成本：项目中一个兼职人员成本。</li><li>分配固定成本：外包任务。</li></ul><h2 id="进度计划"><a href="#进度计划" class="headerlink" title="进度计划"></a>进度计划</h2><p>重要性</p><blockquote><p>按时完成项目是项目经理最大的挑战之一;时间是项目规划中灵活性最小的因素;进度问题是项目冲突的主要原因</p></blockquote><ul><li>进度是对执行的活动和里程碑制定的工作计划日期表</li><li>任务是确定为完成项目的各个交付成果所必须进行的诸项具体活动</li></ul><h3 id="任务间关系的依据"><a href="#任务间关系的依据" class="headerlink" title="任务间关系的依据"></a>任务间关系的依据</h3><ul><li>强制性依赖关系。例如，测试活动一定要在编码任务之后进行。</li><li>软逻辑关系。例如哪一个模块先做哪一个模块后做。</li><li>外部逻辑关系。例如环境测试依赖于外部提供的环境设备。</li></ul><h3 id="进程管理图示"><a href="#进程管理图示" class="headerlink" title="进程管理图示"></a>进程管理图示</h3><h4 id="网络图"><a href="#网络图" class="headerlink" title="网络图"></a>网络图</h4><blockquote><p>网络图是活动排序的一个输出,展示项目中各个活动以及活动之间的逻辑关系 </p></blockquote><ul><li>PDM:优先图法 ,节点法 (单代号)网络图<ul><li>节点(Box)表示活动（任务）</li><li>用箭线表示各活动(任务)之间的逻辑关系</li></ul></li><li>ADM:箭线法、双代号网络图<ul><li>箭线表示活动(任务)</li><li>两个代号唯一确定一个任务</li><li>代号表示前一任务的结束,同时也表示后一任务的开始</li><li>虚活动：为了表示逻辑关系、不消耗资源的</li></ul></li></ul><h4 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h4><blockquote><p>分为棒状甘特图、三角形甘特图</p></blockquote><h4 id="里程碑图"><a href="#里程碑图" class="headerlink" title="里程碑图"></a>里程碑图</h4><blockquote><p>显示项目进展中的重大工作完成情况。不同于活动，活动需要消耗资源，而里程碑不消耗资源和时间。</p></blockquote><h4 id="资源图"><a href="#资源图" class="headerlink" title="资源图"></a>资源图</h4><blockquote><p>显示资源分配的情况</p></blockquote><h3 id="任务历时估算"><a href="#任务历时估算" class="headerlink" title="任务历时估算"></a>任务历时估算</h3><ul><li>定额估算法<ul><li>T=Q/(R*S)</li><li>T:活动历时</li><li>Q:任务工作量</li><li>R:人力数量</li><li>S:工作效率</li></ul></li><li>经验导出模型<ul><li>经验导出模型：D=a*E^b：</li><li>D:进度(以月单位)</li><li>E：工作量(以人月单位)</li><li>a:2—4之间</li><li>b:1/3左右:依赖于项目 </li></ul></li><li>CPM(关键路径法估计)</li><li><p>PERT(工程评估评审技术)</p><ul><li>期望值E=（O+4m+P)/6</li><li>O是最小估算值:乐观(Optimistic)， </li><li>P是最大估算值:悲观(Pessimistic)，</li><li>M是最大可能估算(Most Likely) </li><li>标准差δ =(最大估算值-最小估算值)/6</li><li>方差δ 2 = [(最大估算值-最小估算值)/6]^2</li></ul></li><li><p>基于承诺的进度估计</p></li><li>Jones的一阶估算准则</li></ul><h3 id="进度计划编排"><a href="#进度计划编排" class="headerlink" title="进度计划编排"></a>进度计划编排</h3><h4 id="关键路径法"><a href="#关键路径法" class="headerlink" title="关键路径法"></a>关键路径法</h4><ul><li><p>自由浮动时间：在不影响后置任务最早开始时间的前提下，一个任务可以延迟的时间</p><h4 id="时间压缩法"><a href="#时间压缩法" class="headerlink" title="时间压缩法"></a>时间压缩法</h4></li><li><p>应急法：压缩时间、压缩成本</p></li><li>平行作业法：对任务进行合理拆分，如提前某些任务</li></ul><h4 id="管理预留"><a href="#管理预留" class="headerlink" title="管理预留"></a>管理预留</h4><ul><li>设置缓冲时间</li></ul><h4 id="资源平衡"><a href="#资源平衡" class="headerlink" title="资源平衡"></a>资源平衡</h4><ul><li>调整任务的时间来协调资源的冲突</li></ul><h4 id="敏捷计划"><a href="#敏捷计划" class="headerlink" title="敏捷计划"></a>敏捷计划</h4><ul><li>迭代周期</li></ul><h2 id="质量计划"><a href="#质量计划" class="headerlink" title="质量计划"></a>质量计划</h2><ul><li>质量是满足要求的程度,包括符合规定的要求和满足顾客隐含需求</li><li>软件质量是软件满足明确说明或者隐含的需求的程度</li><li>质量形成于产品或者服务的开发过程中，而不是事后的检查（测试）把关等</li><li>质量成本是由于产品的第一次工作不正常而衍生的附加花费，包括预防成本、缺陷成本</li></ul><h3 id="软件质量模型"><a href="#软件质量模型" class="headerlink" title="软件质量模型"></a>软件质量模型</h3><ul><li>Boehm质量模型</li><li>McCall质量模型</li><li>ISO质量模型</li></ul><p>质量管理的对象：过程质量、产品质量</p><h3 id="软件质量管理过程"><a href="#软件质量管理过程" class="headerlink" title="软件质量管理过程"></a>软件质量管理过程</h3><ul><li>软件质量计划</li><li>软件质量保证</li><li>软件质量控制</li></ul><h3 id="质量计划方法"><a href="#质量计划方法" class="headerlink" title="质量计划方法"></a>质量计划方法</h3><ul><li>试验设计</li><li>基准对照</li><li>质量成本分析</li><li>流程图方法</li><li>因果分析图</li></ul><h2 id="配置管理计划"><a href="#配置管理计划" class="headerlink" title="配置管理计划"></a>配置管理计划</h2><blockquote><p>记录软件产品的演化过程；得到精确的产品配置；最终保证软件产品的完整性、一致性、追朔性、可控性</p></blockquote><p>配置管理的主要功能</p><ul><li>版本管理</li><li>变更管理</li></ul><p>一些概念</p><ul><li>配置项：受控于软件配置管理的款项</li><li>基线提供了软件生存期中各个开发阶段的一个特定点</li><li>一个(些)配置项形成并通过审核，即形成基线</li><li>基线标志开发过程一个阶段的结束和里程碑</li><li>基线修改需要按照正式的程序执行</li></ul><h3 id="配置管理的基本过程"><a href="#配置管理的基本过程" class="headerlink" title="配置管理的基本过程"></a>配置管理的基本过程</h3><ul><li>配置标示、跟踪</li><li>配置管理环境建立</li><li>基线变更管理</li><li>配置管理审计</li><li>配置状态统计</li><li>配置管理计划</li></ul><h2 id="软件项目与人员沟通计划"><a href="#软件项目与人员沟通计划" class="headerlink" title="软件项目与人员沟通计划"></a>软件项目与人员沟通计划</h2><h3 id="组织结构的主要类型"><a href="#组织结构的主要类型" class="headerlink" title="组织结构的主要类型"></a>组织结构的主要类型</h3><h4 id="职能型"><a href="#职能型" class="headerlink" title="职能型"></a>职能型</h4><ul><li>优点<ul><li>可以充分发挥职能部门的资源集中优势</li><li>部门的专家可以同时为部门内不同项目使用</li><li>便于相互交流 , 相互支援</li><li>可以随时增派人员</li><li>可以将项目和本部门的职能工作融为一体</li></ul></li><li>缺点<ul><li>项目和部门利益发生冲突，职能部门更重视本部门目标,会忽视项目目标</li><li>资源平衡会出现问题</li><li>权利分割不利于各个职能部门的交流和团结协作</li><li>行政隶属关系使得项目经理没有充分的权利<h4 id="项目型"><a href="#项目型" class="headerlink" title="项目型"></a>项目型</h4></li></ul></li><li>优点<ul><li>项目经理对项目可以负全责</li><li>项目目标单一，可以以项目为中心,有利于项目顺利进行</li><li>避免多重领导</li><li>组织结构简单，交流简单,快速</li></ul></li><li>缺点<ul><li>资源不能共享</li><li>各个独立的项目处于相对封闭状态,不利于公司政策的贯彻</li><li>对项目组织的成员缺少一种事业上的连续性和安全感</li><li>项目组织之间处于分割状态,缺少信息交流</li></ul></li></ul><h4 id="矩阵型"><a href="#矩阵型" class="headerlink" title="矩阵型"></a>矩阵型</h4><ul><li>优点<ul><li>专职的项目经理负责整个项目 , 以项目为中心,</li><li>公司的多个项目可以共享各个职能部门的资源</li><li>即利于项目目标的实现,又利于公司目标方针的贯彻</li><li>项目成员的顾虑减少了</li></ul></li><li>缺点<ul><li>容易引起职能经理和项目经理权力的冲突</li><li>资源共享也能引起项目之间的冲突</li></ul></li></ul><h3 id="干系人管理计划"><a href="#干系人管理计划" class="headerlink" title="干系人管理计划"></a>干系人管理计划</h3><ul><li>干系人（stakeholder）是能影响项目决策、活动或者结果的个人、群体或者组织，以及会受到或者自认为会受到项目决策、活动或者结果影响的个人、群体或者组织</li><li>识别出干系人，分析和记录他们的相关信息。例如联络信息、他们的利益、参与度、影响力、以及对项目成功的潜在影响。</li></ul><h3 id="项目沟通的基本原则"><a href="#项目沟通的基本原则" class="headerlink" title="项目沟通的基本原则"></a>项目沟通的基本原则</h3><ul><li>及时性</li><li>准确性</li><li>完整性</li><li>可理解性</li></ul><h3 id="项目沟通的方式"><a href="#项目沟通的方式" class="headerlink" title="项目沟通的方式"></a>项目沟通的方式</h3><ul><li>书面沟通和口头沟通</li><li>语言沟通和非语言沟通</li><li>正式沟通和非正式沟通</li><li>单向沟通和双向沟通</li><li>网络沟通</li></ul><h3 id="项目沟通计划"><a href="#项目沟通计划" class="headerlink" title="项目沟通计划"></a>项目沟通计划</h3><ul><li>沟通计划是确定谁需要信息，需要什么信息，何时需要信息，以及如何将信息分发给他们</li></ul><h2 id="风险计划"><a href="#风险计划" class="headerlink" title="风险计划"></a>风险计划</h2><h3 id="风险类型"><a href="#风险类型" class="headerlink" title="风险类型"></a>风险类型</h3><ul><li>预测角度：已知风险、可预测风险、不可预测风险</li><li>范围角度：商业风险、管理风险、人员风险、技术风险、开发环境风险、客户风险、过程风险、产品规模风险等。</li></ul><h3 id="风险识别"><a href="#风险识别" class="headerlink" title="风险识别"></a>风险识别</h3><blockquote><p>风险识别是试图通过系统化地确定对项目计划的威胁，识别已知和可预测的风险。</p></blockquote><h4 id="风险识别方法"><a href="#风险识别方法" class="headerlink" title="风险识别方法"></a>风险识别方法</h4><ul><li>德尔菲方法</li><li>头脑风暴法</li><li>情景分析法</li><li>利用风险条目检查表</li></ul><h3 id="风险评估"><a href="#风险评估" class="headerlink" title="风险评估"></a>风险评估</h3><blockquote><p>对风险事件发生概率的评估，对项目风险影响的评估，给出项目风险排序。</p></blockquote><ul><li>定性风险评估</li><li>定量风险评估<ul><li>盈亏平衡分析</li><li>模拟</li><li>决策树分析：是一种图表分析方法；提供项目所有可供选择的行动方案，行动方案之间的关系，行动方案的后果以及发生的概率；提供选择一个最佳的方案的依据。<ul><li>EMV (损益期望值)</li></ul></li></ul></li></ul><h3 id="风险规划"><a href="#风险规划" class="headerlink" title="风险规划"></a>风险规划</h3><blockquote><p>针对风险分析的结果，为提高实现项目目标的机会，降低风险的负面影响而制定风险应对策略和应对措施的过程，即制定一定的行动和策略来对付、减少、以至于消灭风险事件造成的影响。</p></blockquote><h3 id="风险应对策略"><a href="#风险应对策略" class="headerlink" title="风险应对策略"></a>风险应对策略</h3><ul><li>回避风险：例如放弃采用新技术。</li><li>转移风险：例如开脱责任合同。</li><li>损失控制<ul><li>损失预防：例如项目技术培训。</li><li>损失抑制：项目人员储备</li></ul></li><li>自留风险：由项目组织自己承担风险事故所致损失的措施</li></ul><h2 id="合同计划"><a href="#合同计划" class="headerlink" title="合同计划"></a>合同计划</h2><h3 id="项目采购"><a href="#项目采购" class="headerlink" title="项目采购"></a>项目采购</h3><blockquote><p>为了执行项目而从项目团队外部获取产品、服务或者结果的过程.</p></blockquote><h3 id="合同类型"><a href="#合同类型" class="headerlink" title="合同类型"></a>合同类型</h3><ul><li>成本补偿合同<ul><li>成本加成本百分比</li><li>成本加固定费用</li><li>成本加奖金</li></ul></li><li>固定价格合同<ul><li>固定价格加奖励费</li><li>固定总价</li></ul></li><li>单价合同<ul><li>工程师单价:130美元/工时</li><li>产品单价:1500元/功能点</li></ul></li></ul><h2 id="集成计划"><a href="#集成计划" class="headerlink" title="集成计划"></a>集成计划</h2><h3 id="软件项目管理最重要的四个要素"><a href="#软件项目管理最重要的四个要素" class="headerlink" title="软件项目管理最重要的四个要素"></a>软件项目管理最重要的四个要素</h3><blockquote><p>范围、质量、进度、成本</p></blockquote><ul><li>范围和成本正比关系。</li><li>质量和成本正比关系。</li><li>进度和成本反比关系。</li></ul><h2 id="集成计划执行控制"><a href="#集成计划执行控制" class="headerlink" title="集成计划执行控制"></a>集成计划执行控制</h2><h3 id="项目执行控制的步骤"><a href="#项目执行控制的步骤" class="headerlink" title="项目执行控制的步骤"></a>项目执行控制的步骤</h3><ul><li>建立标准</li><li>采集项目实际数据（对项目管理、开发和质量活动进行跟踪。记录反映当前项目状态的数据。）</li><li>实际结果与计划比较</li><li>决定是否修正计划（根据评审结果决定是否修改项目计划，计划的不合理。客观原因导致。）</li><li>修正计划，协调各方</li></ul><h2 id="核心计划集成控制"><a href="#核心计划集成控制" class="headerlink" title="核心计划集成控制"></a>核心计划集成控制</h2><h3 id="范围管理"><a href="#范围管理" class="headerlink" title="范围管理"></a>范围管理</h3><ul><li>范围计划的执行</li><li>需求变更的控制</li></ul><h3 id="时间-成本管理"><a href="#时间-成本管理" class="headerlink" title="时间/成本管理"></a>时间/成本管理</h3><h4 id="图解控制法"><a href="#图解控制法" class="headerlink" title="图解控制法"></a>图解控制法</h4><blockquote><p>一目了然的了解项目的状况，易于理解，但最大缺点就是仅仅提供视觉印象，无法提供量化的信息</p></blockquote><ul><li>进度甘特图</li><li>资源图（资源图围住的面积代表某段工作时间的资源消耗）</li><li>费用曲线图</li></ul><h4 id="挣值分析法"><a href="#挣值分析法" class="headerlink" title="挣值分析法"></a>挣值分析法</h4><ul><li>BCWS (Budgeted cost of work scheduled)计划完成工作的预算成本</li><li>ACWP (Actual cost of work performed)<br>已完成工作的实际成本</li><li>BCWP (Budgeted cost of work performed)<br>工作完成的预算成本</li><li>BAC (Budget At Completion)预算总值</li><li>TAC (Time At Completion)预计完成时间</li><li>SV (Schedule Variance)进度差异 = BCWP - BCWS</li><li>CV (cost variance)费用差异 = BCWP - ACWP</li><li>SPI (schedule performance index)进度效能指标 = BCWP/BCWS * 100%</li><li>CPI (cost performance index)成本效能指标 = BCWP/ACWP * 100%</li><li>EAC (estimate at completion)项目完成的预算成本 = BAC/CPI</li><li>SAC (schedule at completion)项目完成的预测时间 = TAC/SPI</li><li>VAC (variance at completion)项目完成的成本差异 = BAC - EAC</li><li>TCPI 未完工的成本效能指标 = 剩余工作/剩余成本 = （BAC - BCWP）/ (GOAL - ACWP)。分子是多少工作要做，分母是还有多少钱可以消费。 </li></ul><h4 id="敏捷进度控制"><a href="#敏捷进度控制" class="headerlink" title="敏捷进度控制"></a>敏捷进度控制</h4><ul><li>燃尽图直观的反映了sprint 过程中剩余工作量情况。</li></ul><h3 id="质量管理"><a href="#质量管理" class="headerlink" title="质量管理"></a>质量管理</h3><h4 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a>质量保证</h4><ul><li>过程审计（需求过程、设计过程、编码过程）</li><li>产品审计（需求规格、设计报告、代码）</li></ul><h4 id="质量控制"><a href="#质量控制" class="headerlink" title="质量控制"></a>质量控制</h4><ul><li>技术评审：采用检查表的技术评审方法</li><li>代码走查</li><li>软件测试：测试是程序的执行过程，目的在于发现错误，一个成功的测试是发现了至今未发现的错误的测试。</li><li>返工：是将有缺陷的和不合格项改造为与需求和规格一致的行为 。</li><li>控制图法</li><li>趋势分析</li><li>抽样统计</li></ul><h2 id="辅助计划执行控制"><a href="#辅助计划执行控制" class="headerlink" title="辅助计划执行控制"></a>辅助计划执行控制</h2><h3 id="人员管理"><a href="#人员管理" class="headerlink" title="人员管理"></a>人员管理</h3><ul><li>马斯洛的需求层次理论：金字塔型，由下到上分别是生理的、安全的、自尊、自我实现</li><li>海兹伯格的激励理论包括内在因素和外在因素，其中内在因素为：成就感、责任感、晋升、被认可；外在因素为：工作环境、薪酬、工作关系、安全等</li><li>麦克勒格的 X－理论：针对懒惰性人员</li><li>麦克勒格的 Y－理论：针对勤奋性人员</li><li>超Ｙ理论 </li><li>Z理论</li><li>期望理论</li></ul><h3 id="干系人管理"><a href="#干系人管理" class="headerlink" title="干系人管理"></a>干系人管理</h3><h3 id="沟通管理"><a href="#沟通管理" class="headerlink" title="沟通管理"></a>沟通管理</h3><ul><li>信息技术沟通：例如利用微信</li><li>正式沟通：例如阶段性评审</li><li>非正式沟通：聊天、聚会</li></ul><h3 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h3><h3 id="合同管理"><a href="#合同管理" class="headerlink" title="合同管理"></a>合同管理</h3><h2 id="项目结束"><a href="#项目结束" class="headerlink" title="项目结束"></a>项目结束</h2><blockquote><p>当项目计划中的可交付成果已经出现，或者项目失败都将导致项目结束，项目结束意味着合同也结束咯。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目管理概述&quot;&gt;&lt;a href=&quot;#项目管理概述&quot; class=&quot;headerlink&quot; title=&quot;项目管理概述&quot;&gt;&lt;/a&gt;项目管理概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;项目&lt;/strong&gt;就是为了创造一个&lt;strong&gt;唯一&lt;/strong&gt;的产品或提供一个唯一的服务而进行的&lt;strong&gt;临时性&lt;/strong&gt;努力。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="软件项目管理" scheme="http://liulinzhe.top/tags/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>小白微信公众号</title>
    <link href="http://liulinzhe.top/2017/12/19/%E5%B0%8F%E7%99%BD%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    <id>http://liulinzhe.top/2017/12/19/小白微信公众号/</id>
    <published>2017-12-19T14:26:37.000Z</published>
    <updated>2017-12-19T15:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先，在需求方面上，个人觉得微信公众号本质上就是以一种服务的形式面向用户，用户在公众号上花的大部分时间都是看文章，查询资源等，例如“长江商业评论、浙商大图书馆“等。从技术层面上看，就是一系列的查询数据库操作。如果在公众号上做过多的增、删、改这种业务操作，实在是没必要。因此从一开始，我们的愿景就是仅提供给用户一些想要的数据。对于程序员来说，音乐就是编程的源泉，没思路的时候，不妨来首音乐放松下。所以我们做了一个公众号，专门提供给用户实时的音乐资源。</p><a id="more"></a></blockquote><h3 id="简述：（二维码在底部）"><a href="#简述：（二维码在底部）" class="headerlink" title="简述：（二维码在底部）"></a>简述：（二维码在底部）</h3><p>既然是实时的音乐资源，那么就不能提供假的数据， 所以我利用了爬虫技术，从网易云音乐官网上爬取其热歌榜、新歌榜、热评等实时数据。这时就需要一些爬虫的小技巧了，我就说说我用到的一些小白爬虫技巧吧。足以能够应付以上这些需求了。</p><ul><li>一、设置User-agent模拟浏览器，不然运维人员发现访问的ip都是同一个ip，并且User-agent都是Python程序的话。就会被限制访问了。</li><li>二、获取代理ip爬取数据，如果同一个ip访问次数过于频繁也会被限制（深受其害…）</li><li>三．设置延时访问（试过，Python本身运行就慢，再设置这个，更慢…）<br>爬取热歌榜、新歌榜还是比较轻松的，因为只用访问一次。但是热评就不一样了，有多少音乐id，就要访问多少次。很容易被限制访问。我成功测试了连续访问200次。</li></ul><p>菜单栏中的音乐宝库按钮，采用的是内置网页的形式，其中用了微信团队研发的WEUI框架，使用的时候出现了一些小瑕疵，引入navbar的时候并不像demo所示的那种效果，我的解决办法就是重写它的部分css就可以了。今日热评和今日歌曲就用rand()函数随机返回几条数据就行了。</p><h3 id="遇到的一个大坑："><a href="#遇到的一个大坑：" class="headerlink" title="遇到的一个大坑："></a>遇到的一个大坑：</h3><p>从数据库返回数据的时候，拼接过程中，不小心在每个url的前面加了换行符…然后就深陷Bug中无法自拔了。</p><h3 id="还有一个小坑："><a href="#还有一个小坑：" class="headerlink" title="还有一个小坑："></a>还有一个小坑：</h3><p>js传参数的时候，只能传数字，原因：没转义….（php,html各种穿插真的难写）。</p><h3 id="不足之处："><a href="#不足之处：" class="headerlink" title="不足之处："></a>不足之处：</h3><p>功能比较简约，缺少时效性。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>以上，就是我在制作“十月音乐盒”公众号时，从设计到实现遇到的一些问题与见解。</p><hr><h3 id="二维码在这！"><a href="#二维码在这！" class="headerlink" title="二维码在这！"></a>二维码在这！</h3><p><img src="https://raw.githubusercontent.com/Liulinzhe17/WeiXinTestAccounts/master/QRcode.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先，在需求方面上，个人觉得微信公众号本质上就是以一种服务的形式面向用户，用户在公众号上花的大部分时间都是看文章，查询资源等，例如“长江商业评论、浙商大图书馆“等。从技术层面上看，就是一系列的查询数据库操作。如果在公众号上做过多的增、删、改这种业务操作，实在是没必要。因此从一开始，我们的愿景就是仅提供给用户一些想要的数据。对于程序员来说，音乐就是编程的源泉，没思路的时候，不妨来首音乐放松下。所以我们做了一个公众号，专门提供给用户实时的音乐资源。&lt;/p&gt;
    
    </summary>
    
      <category term="微信公众号" scheme="http://liulinzhe.top/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
      <category term="php" scheme="http://liulinzhe.top/tags/php/"/>
    
      <category term="python" scheme="http://liulinzhe.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>仿知乎广告植入</title>
    <link href="http://liulinzhe.top/2017/12/01/%E4%BB%BF%E7%9F%A5%E4%B9%8E%E5%B9%BF%E5%91%8A%E6%A4%8D%E5%85%A5/"/>
    <id>http://liulinzhe.top/2017/12/01/仿知乎广告植入/</id>
    <published>2017-12-01T13:17:25.000Z</published>
    <updated>2018-05-07T05:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前天夜晚，我也像往常一样刷着知乎，正当我困意十足，准备睡觉时，突然一个神奇的cell吸引了我的注意力。仔细一看，原来是知乎植入的广告，这种植入方式，真的是太有创意了emmmmmmmmm。所以我打算模仿一下</p></blockquote><a id="more"></a><p><strong>效果图：</strong></p><p><img src="https://raw.githubusercontent.com/Liulinzhe17/ZhihuAds/master/ZhihuAds.gif" alt="效果图"><br>​    </p><p>这种植入广告的方式真的很赞，仅用有限的区域，就能展示一个全屏的广告，很多用户可能会对这种cell很新奇，便会点击进去，就比如我emmmmmm</p><p><em>demo地址：</em><a href="https://github.com/Liulinzhe17/ZhihuAds" target="_blank" rel="external">https://github.com/Liulinzhe17/ZhihuAds</a></p><h5 id="正文："><a href="#正文：" class="headerlink" title="正文："></a><strong>正文：</strong></h5><p>整体的思路还是很清晰的，就是一个tableview里有两种不同类型的tableviewcell，一种是内容cell，一种是广告cell，当广告cell可视的时候，其背景色设为透明，并且将tableview的背景设置成广告图片，当广告cell离开屏幕时，将tableview的背景视图设为nil即可。</p><h5 id="其中要注意的一些点："><a href="#其中要注意的一些点：" class="headerlink" title="其中要注意的一些点："></a>其中要注意的一些点：</h5><ul><li><p>将广告cell 背景色改成透明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adscell.backgroundColor=[UIColor clearColor];</div></pre></td></tr></table></figure></li><li><p>tableviewcell的高度要根据内容自适应，仔细观察会发现知乎的内容简介最多不超过三行，所以我 设置了UIlabel最大行数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">label.numberofLines=3;</div></pre></td></tr></table></figure></li><li><p>tableviewcell里的contentView中内容高度不固定的，要设置其上下左右约束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//cell高度随内容自适应</div><div class="line">_tableview.estimatedRowHeight=100;//估算内容高度</div><div class="line">_tableview.rowHeight=UITableViewAutomaticDimension;</div></pre></td></tr></table></figure><p>​</p></li><li><p>当广告cell进入屏幕时，将此时tableview的背景图片改成广告图片，当广告cell离开屏幕时，将背景图片置空即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//判断广告cell是否在屏幕上</div><div class="line">- (void)tableView:(UITableView *)tableView didEndDisplayingCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    if ([types[indexPath.section]intValue]==0) &#123;</div><div class="line">        //移除广告背景图片</div><div class="line">        self.tableview.backgroundView=nil;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>当点击广告cell时，要判断此时广告cell所处的坐标，然后广告图片从广告cell所处的位置出发，渐渐的扩大到整个屏幕。（PS：其实有更加好的做法，就是再添加两个掩盖层，一个往上收，一个往下收，这样效果会好一点，不会有图片被压缩的感觉）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> //获取tableviewcell相对父视图的位置</div><div class="line">CGRect rectInTableView = [tableView rectForRowAtIndexPath:indexPath];</div><div class="line">CGRect location = [tableView convertRect:rectInTableView toView:[tableView superview]];</div></pre></td></tr></table></figure></li></ul><hr><h5 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h5><p>点击广告cell的处理还有一些问题，个人觉得应该是将广告cell扩大到整个屏幕，而不是添加一个子视图这种蠢操作。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前天夜晚，我也像往常一样刷着知乎，正当我困意十足，准备睡觉时，突然一个神奇的cell吸引了我的注意力。仔细一看，原来是知乎植入的广告，这种植入方式，真的是太有创意了emmmmmmmmm。所以我打算模仿一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://liulinzhe.top/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>JPA  映射双向多对多的问题</title>
    <link href="http://liulinzhe.top/2017/11/28/JPA/"/>
    <id>http://liulinzhe.top/2017/11/28/JPA/</id>
    <published>2017-11-28T12:57:35.000Z</published>
    <updated>2017-12-14T13:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>本文主要解决的问题：用jpa实现两张表（多对多关联）的时候碰到<strong>Expected ‘:’ instead of ‘t’</strong>的错误 以及一大堆的jackson errors</p></blockquote><a id="more"></a><p>关于jpa怎么实现两个多对多的表之间的关联，网上已经有一大堆博客讲的非常详细了,可参考</p><p><em>详细版</em>      <a href="https://www.cnblogs.com/lj95801/p/5011537.html" target="_blank" rel="external">https://www.cnblogs.com/lj95801/p/5011537.html</a></p><p><em>简约版</em>       <a href="http://blog.csdn.net/lewis_007/article/details/53006602" target="_blank" rel="external">http://blog.csdn.net/lewis_007/article/details/53006602</a></p><hr><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>学生实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class Student &#123;</div><div class="line"></div><div class="line">    @Id</div><div class="line">    private Integer stuId;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    @ManyToMany(cascade = CascadeType.ALL)</div><div class="line">    @JoinTable(name = &quot;中间表的名字&quot;, joinColumns = &#123;</div><div class="line">            @JoinColumn(name = &quot;stuId&quot;, referencedColumnName = &quot;stuId&quot;)&#125;, inverseJoinColumns = &#123;</div><div class="line">            @JoinColumn(name = &quot;courseId&quot;, referencedColumnName = &quot;courseId&quot;)&#125;)</div><div class="line">    private Set&lt;Course&gt; courses;</div><div class="line"></div><div class="line">    public Student() &#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Set&lt;Course&gt; getCourses() &#123;</div><div class="line">        return courses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCourses(Set&lt;Course&gt; courses) &#123;</div><div class="line">        this.courses = courses;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...other setters and getters</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>课程实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class Course &#123;</div><div class="line"></div><div class="line">    @Id</div><div class="line">    private Integer courseId;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">  @ManyToMany(mappedBy = &quot;courses&quot;)</div><div class="line">    private Set&lt;Student&gt; students;</div><div class="line"></div><div class="line">    public Course() &#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Set&lt;Student&gt; getStudents() &#123;</div><div class="line">        return students;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStudents(Set&lt;Student&gt; students) &#123;</div><div class="line">        this.students = students;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...other setters and getters</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value=&quot;/list&quot;, method=RequestMethod.GET)</div><div class="line">@ResponseBody</div><div class="line">public List&lt;Student&gt; list() &#123;</div><div class="line">    List&lt;Student&gt; stu = stuService.findAll();</div><div class="line">    return stu;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当我用postman请求这个接口的时候，返回的是<strong>Expected ‘:’ instead of ‘t’</strong>，控制台也会出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[jackson-databind-2.6.6.jar:2.6.6]</div><div class="line">        at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:693) ~[jackson-databind-2.6.6.jar:2.6.6]</div><div class="line">        at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:675) ~[jackson-databind-2.6.6.jar:2.6.6].....省略....</div></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>为什么会出现这个问题呢？我们看看源码，很容易就发现当请求返回Student列表时，学生类里的courses属性会引用Course类，而Course类里students属性又会引用Student类，因此造成了循环引用。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>用@JsonIgnore<br>JsonIgnore注解主要用于属性或者方法上，作用就是忽略属性或者方法，此处用在了getStudents（）方法上<br>只需在课程实体类的 getStudents()方法上加一行代码,即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@JsonIgnore</div><div class="line">public Set&lt;Student&gt; getStudents() &#123;</div><div class="line">    return students;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>Stack Overflow大法好😄</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要解决的问题：用jpa实现两张表（多对多关联）的时候碰到&lt;strong&gt;Expected ‘:’ instead of ‘t’&lt;/strong&gt;的错误 以及一大堆的jackson errors&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://liulinzhe.top/categories/web/"/>
    
    
      <category term="springboot" scheme="http://liulinzhe.top/tags/springboot/"/>
    
      <category term="jpa" scheme="http://liulinzhe.top/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>误删了Assets.xcasetts</title>
    <link href="http://liulinzhe.top/2017/09/23/%E8%AF%AF%E5%88%A0%E4%BA%86Assets-xcasetts/"/>
    <id>http://liulinzhe.top/2017/09/23/误删了Assets-xcasetts/</id>
    <published>2017-09-23T15:51:07.000Z</published>
    <updated>2017-12-14T13:19:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>今天在删除文件的时候，一不小心手贱就把Assets.xcasetts删除了，淡定的我默默的打开了废纸篓，拖了回去🤷‍♀️，没想到，打开app后发现所有的图片都不显示了。。。</p></blockquote><a id="more"></a><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li>1.打开废纸篓，将Assets.xcasetts放回原处</li><li>2.找到Assets.xcasetts所在的目录，将其移到桌面</li><li>3.回到xcode，new -&gt; File…-&gt; Resource -&gt;Asset Catalog 将其命名为Assets.xcasetts</li><li>4.退出xcode，把桌面上的Assets.xcasetts替换掉项目里新创建的Assets.xcasetts</li><li>5.你可以继续愉快的编程了😄 <strong>（如果还不行的话，那就只能把所有图片重新拖到新创建的Assets.xcasetts里了）</strong></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;今天在删除文件的时候，一不小心手贱就把Assets.xcasetts删除了，淡定的我默默的打开了废纸篓，拖了回去🤷‍♀️，没想到，打开app后发现所有的图片都不显示了。。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://liulinzhe.top/categories/iOS/"/>
    
    
      <category term="xcode" scheme="http://liulinzhe.top/tags/xcode/"/>
    
  </entry>
  
</feed>
