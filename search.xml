<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[软件项目管理笔记]]></title>
    <url>%2F2018%2F01%2F12%2F%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[个人笔记项目管理概述 项目就是为了创造一个唯一的产品或提供一个唯一的服务而进行的临时性努力。 项目特征 目标性：达成某一目的，例如完成一个学生成绩管理系统。 相关性：例如举办一个野餐活动，首先选好地点，才能前往地点进行野餐。 临时性：要在给定的时间完成任务。 独特性：例如每个学校都有自己的学生管理系统，但该系统总会有点差别。有自己的独特性。 资源约束性：资源是有限的，例如做一个学生成绩管理系统，不可能全球的开发者都为你服务。 不确定性：开发者做到一半跑路了。 软件项目除了具备项目的基本特征之外，还有自己的特殊性 软件项目特殊性 软件是一种逻辑实体。 相互作用的系统。 变更，如需求变更。 渐进明细，因为项目的独特性和临时性。 项目管理是项目随着时间的进行，为了确保项目能达到预期结果的一系列管理行为。而软件项目管理 = 项目管理 + 软件项目 + 经验技巧 + …. 项目管理知识体系10个知识领域 集成管理（Integration Mgt），成功的关键，贯穿整个项目。 范围管理 (Scope Mgt)，定义需要完成的工作。 时间管理 (Time Mgt)，保证按时完成。 成本管理 (Cost Mgt)，保证项目所花费的成本不超过预算成本。 质量管理 (Quality Mgt)，保证满足需求。 人力资源管理 (HR Mgt)，充分发挥参与项目人员的积极性。 沟通管理 (Communication Mgt)，确保信息的正确传递。 风险管理 (Risk Mgt)，降低项目失败的概率。 采购管理 (Procurement Mgt)，为了满足项目需求，从外部获取资源。 干系人管理 (Stakeholder Mgt)，分析所有对项目造成影响的人，解决利益冲突。 5个标准化过程 启动过程组 计划过程组 执行过程组 控制过程组 收尾过程组 项目确立项目立项 明确项目的目标、时间表、项目使用的资源和经费，而且得到执行该项目的项目经理和项目发起人的认可。 项目决策：采购？自主研发？外包开发？ 项目招投标 甲方招标书定义 -&gt; 乙方拿到招标书进行项目分析 -&gt; 乙方竞标准备 -&gt; 招标竞标 -&gt; 合同签署。 项目章程 正式的授权项目，任命项目经理，说明项目背景、来源、约束等，通常由项目发起人、高管等签发。 项目经理的职责 开发计划 组织实施 项目控制 生存期模型 描述了开发的主要阶段 定义每一个阶段要完成的主要过程和活动 确定每一个阶段的输入和输出 瀑布模型 瀑布模型的流程为：需求分析 -&gt; 设计 -&gt; 实施 -&gt; 测试 -&gt; 维护 需求明确 方案明确 短期项目 V模型 是一种强调测试重要性的模型，是瀑布模型的变种。其中，详细设计—单元测试；总体设计—集成测试；需求分析—系统测试；用户需求—接受测试。 需求明确 方案明确 系统性能、安全等有严格要求 快速原型模型 是在需求阶段快速构建一部分系统的生存期模型，其流程：需求分析 -&gt; 原型开发 -&gt; 原型评价 -&gt; 最终系统设计 -&gt; 最终系统实现 需求不明确 希望减少项目需求的不确定性 增量模型 将需求分段，先完成核心功能的开发，之后交给用户进行评价，经过评价之后形成下一个增量模型的开发计划，它包括对核心产品的修改和一些新功能的发布，直到产生最终的完善产品。 需求基本明确，可能发生变化 对于市场和用户把握需要逐步了解 系统改造需要一步步实施 渐进式阶段模型 具有渐进式前进、阶段式提交的特点。适用中大型项目。 优点⬇️ 阶段式提交一个可运行的产品 关键功能更早出现 早期预警问题，避免缺陷蔓延 阶段性完成可以降低估计失误 缺点⬇️ 需要精心规划各个阶段的目标 每阶段提交的都是正式版本，工作量增加 敏捷模型 不同于传统型开发模型，它更加灵活，可以应对迅速变化的需求，是一种迭代。循序渐进的开发方法。 scrum-燃尽图 有利于工作量的预估 极限编程-xp 实施原则：快速反馈、假设简单、包容变化 软件需求软件需求定义 需求是指用户对软件的功能和性能的要求。它有三个不同的层次。 业务需求:反映了客户对系统的高层次要求 用户需求：用户通过该软件要完成的任务 功能需求：开发人员必须实现的软件功能 软件需求规格：充分描述软件系统必须实现的软件功能 需求管理过程 需求获取 -&gt; 需求分析 —&gt; 需求规格编写 -&gt; 需求验证 -&gt; 需求变更 需求分析是为用户所看到的系统建立一个概念模型，是对需求的抽象描述 一份完整、规范的需求规格说明书是需求分析完成的一个基本标志 需求变更 确定需求变更控制过程 建立变更控制委员会(SCCB) 进行需求变更影响分析 跟踪所有受需求变更影响的工作产品 建立需求基准版本和需求控制版本文档 维护需求变更的历史记录 跟踪每项需求的状态 衡量需求稳定性 需求建模方法 原型方法，即需求分析，原型开发，原型评价之间的转移。 结构化分析法，包括数据流图、数据字典、系统流程图。 面向对象的用例分析法，即用例图、顺序图、状态图、活动图。 基于面向对象的情景分析方法 从用户角度出发考虑的功能需求 用例是系统向用户提供一个有价值的结果的某项功能 功能列表法，即列出所有子功能并给予描述 任务分解 将一个项目分解为更多的子项目，使项目变得更小、更易管理、更易操作,任务分解结果：WBS（Work Breakdown Structure:任务分解结构） WBS和工作包 WBS是对项目由粗到细的分解过程。 面向交付成果的 WBS它组织并定义了整个项目范围 WBS的最低层次的可交付成果 工作包应当由唯一主体负责 任务分解形式 清单形式 图表形式 任务分解过程任务分解基本步骤 确认并分解项目的组成要素(WBS编号) 确定分解标准 确定分解是否详细 确定项目交付成果（可以编制WBS字典） 验证分解的正确性 任务分解的标准 统一，不能有双重标准 最底层的要素是否是实现目标的充分必要条件 最底层要素是否有重复的 每个要素是否清晰完整定义 最底层要素是否有定义清晰的责任人 是否可以进行成本估算和进度安排 WBS任务分解建议 最低层是可控的和可管理的，但是不必要的过细 每个工作包必须有一个提交物 定义任务完成的标准 有利于责任分配 推荐任务分解到40小时以内 WBS字典 对工作包的阐述，也可以包括其他信息，如进度表的日期，成本预算。 任务分解方法 模板参照方法：很多领域都有标准的WBS，可以当作模板参考使用 类比方法：一些企业保存一些项目的WBS库为其他项目的开发提供参照 自顶向下：将一个项目逐步分解成许多子项目，是创建WBS的最好方法 自底向上：适合陌生的项目]]></content>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小白微信公众号]]></title>
    <url>%2F2017%2F12%2F19%2F%E5%B0%8F%E7%99%BD%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[首先，在需求方面上，个人觉得微信公众号本质上就是以一种服务的形式面向用户，用户在公众号上花的大部分时间都是看文章，查询资源等，例如“长江商业评论、浙商大图书馆“等。从技术层面上看，就是一系列的查询数据库操作。如果在公众号上做过多的增、删、改这种业务操作，实在是没必要。因此从一开始，我们的愿景就是仅提供给用户一些想要的数据。对于程序员来说，音乐就是编程的源泉，没思路的时候，不妨来首音乐放松下。所以我们做了一个公众号，专门提供给用户实时的音乐资源。 简述：（二维码在底部）既然是实时的音乐资源，那么就不能提供假的数据， 所以我利用了爬虫技术，从网易云音乐官网上爬取其热歌榜、新歌榜、热评等实时数据。这时就需要一些爬虫的小技巧了，我就说说我用到的一些小白爬虫技巧吧。足以能够应付以上这些需求了。 一、设置User-agent模拟浏览器，不然运维人员发现访问的ip都是同一个ip，并且User-agent都是Python程序的话。就会被限制访问了。 二、获取代理ip爬取数据，如果同一个ip访问次数过于频繁也会被限制（深受其害…） 三．设置延时访问（试过，Python本身运行就慢，再设置这个，更慢…）爬取热歌榜、新歌榜还是比较轻松的，因为只用访问一次。但是热评就不一样了，有多少音乐id，就要访问多少次。很容易被限制访问。我成功测试了连续访问200次。 菜单栏中的音乐宝库按钮，采用的是内置网页的形式，其中用了微信团队研发的WEUI框架，使用的时候出现了一些小瑕疵，引入navbar的时候并不像demo所示的那种效果，我的解决办法就是重写它的部分css就可以了。今日热评和今日歌曲就用rand()函数随机返回几条数据就行了。 遇到的一个大坑：从数据库返回数据的时候，拼接过程中，不小心在每个url的前面加了换行符…然后就深陷Bug中无法自拔了。 还有一个小坑：js传参数的时候，只能传数字，原因：没转义….（php,html各种穿插真的难写）。 不足之处：功能比较简约，缺少时效性。 总结：以上，就是我在制作“十月音乐盒”公众号时，从设计到实现遇到的一些问题与见解。 二维码在这！]]></content>
      <categories>
        <category>微信公众号</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿知乎广告植入]]></title>
    <url>%2F2017%2F12%2F01%2F%E4%BB%BF%E7%9F%A5%E4%B9%8E%E5%B9%BF%E5%91%8A%E6%A4%8D%E5%85%A5%2F</url>
    <content type="text"><![CDATA[23.30熄灯–&gt;上床–&gt;刷微博、知乎–&gt;00.30睡觉。这应该是我近几个月最常做的事了，刷微博对于我来说，能随时随地发现新鲜事，能作为饭后的谈资，知乎更像是支付宝里的蚂蚁森林，每次刷都会发现很有趣的东西，吸取其中的能量。前天夜晚，我也像往常一样刷着知乎，正当我困意十足，准备睡觉时，突然一个神奇的cell吸引了我的注意力。仔细一看，原来是知乎植入的广告，这种植入方式，真的是太有创意了emmmmmmmmm。所以我打算模仿一下 效果图： ​ 这种植入广告的方式真的很赞，仅用有限的区域，就能展示一个全屏的广告，很多用户可能会对这种cell很新奇，便会点击进去，就比如我emmmmmm demo地址：https://github.com/Liulinzhe17/ZhihuAds 正文：整体的思路还是很清晰的，就是一个tableview里有两种不同类型的tableviewcell，一种是内容cell，一种是广告cell，当广告cell可视的时候，其背景色设为透明，并且将tableview的背景设置成广告图片，当广告cell离开屏幕时，将tableview的背景视图设为nil即可。 其中要注意的一些点： 将广告cell 背景色改成透明 1adscell.backgroundColor=[UIColor clearColor]; tableviewcell的高度要根据内容自适应，仔细观察会发现知乎的内容简介最多不超过三行，所以我 设置了UIlabel最大行数。 1label.numberofLines=3; tableviewcell里的contentView中内容高度不固定的，要设置其上下左右约束。 123//cell高度随内容自适应_tableview.estimatedRowHeight=100;//估算内容高度_tableview.rowHeight=UITableViewAutomaticDimension; ​ 当广告cell进入屏幕时，将此时tableview的背景图片改成广告图片，当广告cell离开屏幕时，将背景图片置空即： 1234567//判断广告cell是否在屏幕上- (void)tableView:(UITableView *)tableView didEndDisplayingCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath&#123; if ([types[indexPath.section]intValue]==0) &#123; //移除广告背景图片 self.tableview.backgroundView=nil; &#125;&#125; 当点击广告cell时，要判断此时广告cell所处的坐标，然后广告图片从广告cell所处的位置出发，渐渐的扩大到整个屏幕。（PS：其实有更加好的做法，就是再添加两个掩盖层，一个往上收，一个往下收，这样效果会好一点，不会有图片被压缩的感觉） 123 //获取tableviewcell相对父视图的位置CGRect rectInTableView = [tableView rectForRowAtIndexPath:indexPath];CGRect location = [tableView convertRect:rectInTableView toView:[tableView superview]]; 结尾点击广告cell的处理还有一些问题，个人觉得应该是将广告cell扩大到整个屏幕，而不是添加一个子视图这种蠢操作。。。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JPA 映射双向多对多的问题]]></title>
    <url>%2F2017%2F11%2F28%2FJPA%2F</url>
    <content type="text"><![CDATA[本文主要解决的问题：用jpa实现两张表（多对多关联）的时候碰到Expected ‘:’ instead of ‘t’的错误 以及一大堆的jackson errors 关于jpa怎么实现两个多对多的表之间的关联，网上已经有一大堆博客讲的非常详细了,可参考 详细版 https://www.cnblogs.com/lj95801/p/5011537.html 简约版 http://blog.csdn.net/lewis_007/article/details/53006602 例子学生实体 12345678910111213141516171819202122232425262728@Entitypublic class Student &#123; @Id private Integer stuId; private String name; @ManyToMany(cascade = CascadeType.ALL) @JoinTable(name = &quot;中间表的名字&quot;, joinColumns = &#123; @JoinColumn(name = &quot;stuId&quot;, referencedColumnName = &quot;stuId&quot;)&#125;, inverseJoinColumns = &#123; @JoinColumn(name = &quot;courseId&quot;, referencedColumnName = &quot;courseId&quot;)&#125;) private Set&lt;Course&gt; courses; public Student() &#123; &#125; public Set&lt;Course&gt; getCourses() &#123; return courses; &#125; public void setCourses(Set&lt;Course&gt; courses) &#123; this.courses = courses; &#125; ...other setters and getters&#125; 课程实体 12345678910111213141516171819202122232425@Entitypublic class Course &#123; @Id private Integer courseId; private String name; @ManyToMany(mappedBy = &quot;courses&quot;) private Set&lt;Student&gt; students; public Course() &#123; &#125; public Set&lt;Student&gt; getStudents() &#123; return students; &#125; public void setStudents(Set&lt;Student&gt; students) &#123; this.students = students; &#125; ...other setters and getters&#125; 控制器 123456@RequestMapping(value=&quot;/list&quot;, method=RequestMethod.GET)@ResponseBodypublic List&lt;Student&gt; list() &#123; List&lt;Student&gt; stu = stuService.findAll(); return stu;&#125; 当我用postman请求这个接口的时候，返回的是Expected ‘:’ instead of ‘t’，控制台也会出现以下错误： 123[jackson-databind-2.6.6.jar:2.6.6] at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:693) ~[jackson-databind-2.6.6.jar:2.6.6] at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:675) ~[jackson-databind-2.6.6.jar:2.6.6].....省略.... 原因为什么会出现这个问题呢？我们看看源码，很容易就发现当请求返回Student列表时，学生类里的courses属性会引用Course类，而Course类里students属性又会引用Student类，因此造成了循环引用。 解决办法用@JsonIgnoreJsonIgnore注解主要用于属性或者方法上，作用就是忽略属性或者方法，此处用在了getStudents（）方法上只需在课程实体类的 getStudents()方法上加一行代码,即： 1234@JsonIgnorepublic Set&lt;Student&gt; getStudents() &#123; return students;&#125; 结尾Stack Overflow大法好😄]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>jpa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[误删了Assets.xcasetts]]></title>
    <url>%2F2017%2F09%2F23%2F%E8%AF%AF%E5%88%A0%E4%BA%86Assets-xcasetts%2F</url>
    <content type="text"><![CDATA[今天在删除文件的时候，一不小心手贱就把Assets.xcasetts删除了，淡定的我默默的打开了废纸篓，拖了回去🤷‍♀️，没想到，打开app后发现所有的图片都不显示了。。。 解决办法 1.打开废纸篓，将Assets.xcasetts放回原处 2.找到Assets.xcasetts所在的目录，将其移到桌面 3.回到xcode，new -&gt; File…-&gt; Resource -&gt;Asset Catalog 将其命名为Assets.xcasetts 4.退出xcode，把桌面上的Assets.xcasetts替换掉项目里新创建的Assets.xcasetts 5.你可以继续愉快的编程了😄 （如果还不行的话，那就只能把所有图片重新拖到新创建的Assets.xcasetts里了）]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>xcode</tag>
      </tags>
  </entry>
</search>
